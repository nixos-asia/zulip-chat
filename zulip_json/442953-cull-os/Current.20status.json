[
    {
        "content": "<p>Currently, I've only completed the tokenizer. But the general way I want to continue forward is like so:</p>\n<ul>\n<li>Create AST</li>\n<li>Create the lazy interpreters</li>\n<li>At this point, the program will be able to create files similar to Nix or Guix's .drv that specify environment variables, the builder &amp; arguments to that builder and other derivations that this derivation depends on</li>\n</ul>\n<p>That will be all that's done by the <code>cab</code> CLI tool. You will be able to import code from islands (e.g <code>&lt;github:cull-os/cab&gt;</code>) and create derivations (as well as convert islands into derivations). But you won't be able to import or inspect contents of derivations as Cab doesn't know how to build them, which is IMO a feature.</p>",
        "id": 446141360,
        "sender_full_name": "RGBCube",
        "timestamp": 1718993275
    },
    {
        "content": "<p>Essentially, <code>cull-os/cab</code> provides its own language (not Nix) and cross-repo abstraction (not flakes) - but using the underlying <code>.drv</code> language, right?</p>",
        "id": 446141844,
        "sender_full_name": "Srid",
        "timestamp": 1718993459
    },
    {
        "content": "<p>And then <code>cab</code> will invoke the configured derivation builder and copy the result to the current filesystem (if the builder is remote). The builder has to adhere to the \"builder protocol\"; something that I want to create and write a specification for. Unlike Nix or Guix, it will be documented and will allow for custom builders that accomplish custom needs. The specification will only require the builder to return a result matching the specified derivation, making it super flexible.</p>",
        "id": 446141986,
        "sender_full_name": "RGBCube",
        "timestamp": 1718993513
    },
    {
        "content": "<p>FTR, I am able to use the tokenizer (had to use Nix shell from a different Rust project since <code>shell.nix</code> doesn't provide cargo and friends):</p>\n<p><a href=\"/user_uploads/60244/I5J19R4-DvV7olWmBQgXphXG/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/60244/I5J19R4-DvV7olWmBQgXphXG/image.png\" title=\"image.png\"><img src=\"/user_uploads/60244/I5J19R4-DvV7olWmBQgXphXG/image.png\"></a></div>",
        "id": 446142002,
        "sender_full_name": "Srid",
        "timestamp": 1718993518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"725711\">RGBCube</span> <a href=\"#narrow/stream/442953-cull-os/topic/Current.20status/near/446141360\">said</a>:</p>\n<blockquote>\n<ul>\n<li>similar to Nix or Guix's .drv</li>\n</ul>\n</blockquote>\n<p>Ah, wait, you said <em>similar</em> to. So nothing's shared with Nix/nixpkgs?</p>",
        "id": 446142163,
        "sender_full_name": "Srid",
        "timestamp": 1718993576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667408\">Srid</span> <a href=\"#narrow/stream/442953-cull-os/topic/Current.20status/near/446141844\">said</a>:</p>\n<blockquote>\n<p>Essentially, <code>cull-os/cab</code> provides its own language (not Nix) and cross-repo abstraction (not flakes) - but using the underlying <code>.drv</code> language, right?</p>\n</blockquote>\n<p>Yes, it's essentially just a simple tool to compose derivation files (though, I do not think I will use Nix's .drv syntax or even the .drv extension)</p>",
        "id": 446142186,
        "sender_full_name": "RGBCube",
        "timestamp": 1718993582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667408\">Srid</span> <a href=\"#narrow/stream/442953-cull-os/topic/Current.20status/near/446142163\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"725711\">RGBCube</span> <a href=\"#narrow/stream/442953-cull-os/topic/Current.20status/near/446141360\">said</a>:</p>\n<blockquote>\n<ul>\n<li>similar to Nix or Guix's .drv</li>\n</ul>\n</blockquote>\n<p>Ah, wait, you said <em>similar</em> to. So nothing's shared with Nix/nixpkgs?</p>\n</blockquote>\n<p>Yes, I'm not planning to be compatible. What Cab essentially is is a frontend to the Builder Protocol, it creates derivation files required by the protocol and communicates with the backend (the builder server) to produce results</p>",
        "id": 446142299,
        "sender_full_name": "RGBCube",
        "timestamp": 1718993640
    },
    {
        "content": "<p>One could even use Nix for the (currently non existent) protocol to build things, as what Nix does it also create derivation files. Like another frontend</p>",
        "id": 446142475,
        "sender_full_name": "RGBCube",
        "timestamp": 1718993704
    },
    {
        "content": "<p>I'm specifically wondering if it would be possible to use (ie., <code>import &lt;github:NixOS/nixpkgs&gt;</code>) the existing packages from <code>nixpkgs</code> in a Cull package file.</p>",
        "id": 446142569,
        "sender_full_name": "Srid",
        "timestamp": 1718993748
    },
    {
        "content": "<p>I am wondering if <span class=\"user-mention\" data-user-id=\"679006\">@Tim DeHerrera</span> might not be interested in this. Because he and I talked about about separating evaluation and builder functions of Nix, potentially distributing them somehow.</p>",
        "id": 446142772,
        "sender_full_name": "Andreas",
        "timestamp": 1718993822
    },
    {
        "content": "<p>That would require Cab to be compatible with Nix syntax, so no. But if Nix ever gets support for the builder protocol, it wouldn't be that hard to use Nix alongside Cab to build things on your system (with the same daemon managing both)</p>",
        "id": 446142797,
        "sender_full_name": "RGBCube",
        "timestamp": 1718993830
    },
    {
        "content": "<p>Definitely interesting, especially the builder protocol, as that as something I've been itching to improve for years now with Nix.</p>\n<p>Have begun to wonder if a full scale rearch wasn't necessary. I've had some other more outlandish ideas like extending ELF to link dynamic libs via a content addressed URI instead of a file path </p>\n<p>That way, you could make the file system layer a virtual abstraction, and maybe even present the files as a regular FHS while still retaining the benefits of a Nix build.</p>\n<p>In any case, I'll keep a close eye on your project, and maybe even contrib at some point if it helps. Seems like you have a solid plan so far. Bravo <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>",
        "id": 446151052,
        "sender_full_name": "Tim DeHerrera",
        "timestamp": 1718996878
    }
]