[
    {
        "content": "<p>Okay <span class=\"user-mention\" data-user-id=\"679006\">@Tim DeHerrera</span> I might have the next newbie question here <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> In any other language I write that would be no problem for me, but in Nix it is somewhat weird to me. </p>\n<p>This is related to me finally doing the network config setting to have them permanently fixed. I have my list of attrsets:</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code>  <span class=\"ss\">networkInterfaces</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span> <span class=\"ss\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"enp4s0f0np0\"</span><span class=\"p\">;</span>\n      <span class=\"ss\">metric</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"p\">{</span> <span class=\"ss\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"enp4s0f1np1\"</span><span class=\"p\">;</span>\n      <span class=\"ss\">metric</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"p\">{</span> <span class=\"ss\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"enp6s0\"</span><span class=\"p\">;</span>\n      <span class=\"ss\">metric</span> <span class=\"o\">=</span> <span class=\"mi\">300</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"p\">{</span> <span class=\"ss\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"enp7s0\"</span><span class=\"p\">;</span>\n      <span class=\"ss\">metric</span> <span class=\"o\">=</span> <span class=\"mi\">350</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">];</span>\n</code></pre></div>\n<p>and I want to create this string</p>\n<div class=\"codehilite\"><pre><span></span><code>networking.dhcpcd.extraConfig = &#39;&#39;\n  interface enp4s0f0np0\n  metric 200\n\n  interface enp4s0f1np1\n  metric 100\n\n  interface enp6s0\n  metric 300\n\n  interface enp7s0\n  metric 350\n&#39;&#39;;\n</code></pre></div>\n<p>I think I got a bit lost in the plethora of string concatenation functions that are available ...</p>",
        "id": 444716371,
        "sender_full_name": "Andreas",
        "timestamp": 1718376543
    },
    {
        "content": "<p>You want <code>concatStringsSep</code>. ChatGPT solution (untested):</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"ss\">networkInterfaces</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span> <span class=\"ss\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"enp4s0f0np0\"</span><span class=\"p\">;</span> <span class=\"ss\">metric</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"p\">{</span> <span class=\"ss\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"enp4s0f1np1\"</span><span class=\"p\">;</span> <span class=\"ss\">metric</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"p\">{</span> <span class=\"ss\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"enp6s0\"</span><span class=\"p\">;</span> <span class=\"ss\">metric</span> <span class=\"o\">=</span> <span class=\"mi\">300</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"p\">{</span> <span class=\"ss\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"enp7s0\"</span><span class=\"p\">;</span> <span class=\"ss\">metric</span> <span class=\"o\">=</span> <span class=\"mi\">350</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">];</span>\n\n  networking<span class=\"o\">.</span>dhcpcd<span class=\"o\">.</span><span class=\"ss\">extraConfig</span> <span class=\"o\">=</span> <span class=\"k\">let</span>\n    <span class=\"c1\"># Function to transform a single attribute set to a string</span>\n    <span class=\"ss\">formatInterface</span> <span class=\"o\">=</span> interface<span class=\"p\">:</span> <span class=\"s s-Multiline\">''</span>\n<span class=\"s s-Multiline\">      interface </span><span class=\"si\">${</span>interface<span class=\"o\">.</span>name<span class=\"si\">}</span>\n<span class=\"s s-Multiline\">      metric </span><span class=\"si\">${</span><span class=\"nb\">toString</span> interface<span class=\"o\">.</span>metric<span class=\"si\">}</span>\n<span class=\"s s-Multiline\">    ''</span><span class=\"p\">;</span>\n    <span class=\"c1\"># Transform each attribute set and join them with newlines</span>\n    <span class=\"ss\">formattedInterfaces</span> <span class=\"o\">=</span> <span class=\"nb\">builtins</span><span class=\"o\">.</span>concatStringsSep <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"p\">(</span><span class=\"nb\">builtins</span><span class=\"o\">.</span><span class=\"nb\">map</span> formatInterface networkInterfaces<span class=\"p\">);</span>\n  <span class=\"k\">in</span> <span class=\"s s-Multiline\">''</span>\n<span class=\"s s-Multiline\">    </span><span class=\"si\">${</span>formattedInterfaces<span class=\"si\">}</span>\n<span class=\"s s-Multiline\">  ''</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 444716739,
        "sender_full_name": "Srid",
        "timestamp": 1718376655
    },
    {
        "content": "<p>yeah that looks plausible, I'll test it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 444716818,
        "sender_full_name": "Andreas",
        "timestamp": 1718376675
    },
    {
        "content": "<p>Yeah, might be able to do it more \"manually\" with a fold. Can sometimes end up being quite elegant depending on the situation</p>",
        "id": 444716910,
        "sender_full_name": "Tim DeHerrera",
        "timestamp": 1718376707
    },
    {
        "content": "<p>you have an example?</p>",
        "id": 444717011,
        "sender_full_name": "Andreas",
        "timestamp": 1718376726
    },
    {
        "content": "<p>On my phone arm, but I'll see if I can grab one</p>",
        "id": 444717186,
        "sender_full_name": "Tim DeHerrera",
        "timestamp": 1718376791
    },
    {
        "content": "<p>because elegance might help here, I feel that a good old c-style for-loop is easier to read</p>",
        "id": 444717239,
        "sender_full_name": "Andreas",
        "timestamp": 1718376811
    },
    {
        "content": "<p>sure but for loops don't exist in the purely functional realm <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> </p>\n<p>Here is a basic fold:</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code><span class=\"k\">let</span>\n  <span class=\"ss\">networkInterfaces</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"ss\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"enp4s0f0np0\"</span><span class=\"p\">;</span>\n      <span class=\"ss\">metric</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"p\">{</span>\n      <span class=\"ss\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"enp4s0f1np1\"</span><span class=\"p\">;</span>\n      <span class=\"ss\">metric</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"p\">{</span>\n      <span class=\"ss\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"enp6s0\"</span><span class=\"p\">;</span>\n      <span class=\"ss\">metric</span> <span class=\"o\">=</span> <span class=\"mi\">300</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"p\">{</span>\n      <span class=\"ss\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"enp7s0\"</span><span class=\"p\">;</span>\n      <span class=\"ss\">metric</span> <span class=\"o\">=</span> <span class=\"mi\">350</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">];</span>\n<span class=\"k\">in</span>\n  <span class=\"nb\">builtins</span><span class=\"o\">.</span>foldl' <span class=\"p\">(</span>acc<span class=\"p\">:</span> x<span class=\"p\">:</span>\n    <span class=\"s s-Multiline\">''</span>\n<span class=\"s s-Multiline\">      interface </span><span class=\"si\">${</span>x<span class=\"o\">.</span>name<span class=\"si\">}</span>\n<span class=\"s s-Multiline\">      metric </span><span class=\"si\">${</span><span class=\"nb\">toString</span> x<span class=\"o\">.</span>metric<span class=\"si\">}</span>\n<span class=\"s s-Multiline\">    ''</span>\n    <span class=\"o\">+</span> acc<span class=\"p\">)</span>\n  <span class=\"s2\">\"\"</span>\n  networkInterfaces\n</code></pre></div>",
        "id": 444719098,
        "sender_full_name": "Tim DeHerrera",
        "timestamp": 1718377322
    },
    {
        "content": "<p>ends up being fairly similar to srids version</p>",
        "id": 444719334,
        "sender_full_name": "Tim DeHerrera",
        "timestamp": 1718377376
    },
    {
        "content": "<p>okay so what does <code>networkInterfaces</code> in the very last line do?</p>\n<p>But that looks a bit more concise</p>",
        "id": 444720252,
        "sender_full_name": "Andreas",
        "timestamp": 1718377600
    },
    {
        "content": "<p>That is just the list of interfaces bound to a variable name. Are you generally familiar with how folds work? Essentially its a convenient mechanism in the purely functional style of accumulating values from a list into some other kind of data structure, in this case a string.</p>",
        "id": 444720679,
        "sender_full_name": "Tim DeHerrera",
        "timestamp": 1718377716
    },
    {
        "content": "<p>so <code>foldl'</code> takes 3 args, the first is a function to show how to append each value to the accumulation of values, the second is the starting data structure, in this case an empty string, and the final argument is the list to fold</p>",
        "id": 444720866,
        "sender_full_name": "Tim DeHerrera",
        "timestamp": 1718377771
    },
    {
        "content": "<p>yeah now that starts making a bit more sense.</p>",
        "id": 444721200,
        "sender_full_name": "Andreas",
        "timestamp": 1718377867
    },
    {
        "content": "<p>I guess I am just not purely functional enough (yet)</p>",
        "id": 444721358,
        "sender_full_name": "Andreas",
        "timestamp": 1718377919
    },
    {
        "content": "<p>gonna try this later</p>",
        "id": 444721424,
        "sender_full_name": "Andreas",
        "timestamp": 1718377930
    },
    {
        "content": "<p>Well understand maps and folds will get you pretty far on their own, so you are off to a good start</p>",
        "id": 444721545,
        "sender_full_name": "Tim DeHerrera",
        "timestamp": 1718377978
    },
    {
        "content": "<p>yeah, I mean maps I am fairly familiar with in other languages. But for some reason I find Nix always a bit more obscure to use.</p>",
        "id": 444721662,
        "sender_full_name": "Andreas",
        "timestamp": 1718378024
    },
    {
        "content": "<p>Going back to my original problem, I figured I most likely have to go through <code>networkmanager</code> to set the metric value, using dhcpd won't do the trick.</p>",
        "id": 444865737,
        "sender_full_name": "Andreas",
        "timestamp": 1718459950
    }
]