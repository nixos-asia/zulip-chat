[
    {
        "content": "<h2>Loop over a list in NixOS using the value as an identifier?</h2>\n<p>Link: <a href=\"https://stackoverflow.com/questions/77569447/loop-over-a-list-in-nixos-using-the-value-as-an-identifier\">https://stackoverflow.com/questions/77569447/loop-over-a-list-in-nixos-using-the-value-as-an-identifier</a></p>\n<blockquote>\n<p>In vhost.nix I want to add the users in a loop like the working example in httpd.virtualHosts.</p>\n<p>This is the configuration.nix I am using in a virtual machine:</p>\n<h1>vm.nix</h1>\n<p>{ lib, config, ... }:</p>\n<p>{</p>\n<p>imports = [</p>\n<p>./vhosts.nix</p>\n<p>];</p>\n<p>services.httpd.enable = true;</p>\n<p>vhosts = {</p>\n<p>\"<a href=\"http://test.example.de\">test.example.de</a>\" = {</p>\n<p>customer = \"web2\";</p>\n<p>phpuser = \"web2www1\";</p>\n<p>};</p>\n<p>\"<a href=\"http://test2.example.de\">test2.example.de</a>\" = {</p>\n<p>customer = \"web3\";</p>\n<p>phpuser = \"web3www1\";</p>\n<p>};</p>\n<p>};</p>\n<p>}</p>\n<p>this my module vhost.nix</p>\n<p>{ config, pkgs, lib, ... }:</p>\n<p>with lib;</p>\n<p>let</p>\n<p>cfg = config.vhosts;</p>\n<p>in</p>\n<p>{</p>\n<p>options.vhosts = lib.mkOption {</p>\n<p>type = with lib.types; attrsOf (submodule ({domain, ... }: {</p>\n<p>options = {</p>\n<p>customer = mkOption {</p>\n<p>type = str;</p>\n<p>};</p>\n<p>phpuser = mkOption {</p>\n<p>type = str;</p>\n<p>};</p>\n<p>};</p>\n<p>}));</p>\n<p>};</p>\n<p>config = {</p>\n<p>services.httpd.virtualHosts = lib.mapAttrs (domain: cfg: {</p>\n<p>documentRoot = \"/srv/www/${cfg.customer}/${domain}\";</p>\n<p>}) cfg;</p>\n<h1>how do I solve this in a loop like above ?</h1>\n<p>users.users.web2www1.isNormalUser = true;</p>\n<p>users.users.web3www1.isNormalUser = true;</p>\n<p>};</p>\n<p>}</p>\n<p>how do I solve this in a loop like above ?</p>\n</blockquote>\n<p>Published Date: 2023-11-29T08:06:37Z</p>",
        "id": 404986967,
        "sender_full_name": "Zapier",
        "timestamp": 1701309345
    },
    {
        "content": "<h2>How to allow \"unfree\" packages in Nix, for each situation?: {NixOS, Nix, Nix with Flakes, Nix with Flakes and Home Manager}</h2>\n<p>Link: <a href=\"https://stackoverflow.com/questions/77585228/how-to-allow-unfree-packages-in-nix-for-each-situation-nixos-nix-nix-wit\">https://stackoverflow.com/questions/77585228/how-to-allow-unfree-packages-in-nix-for-each-situation-nixos-nix-nix-wit</a></p>\n<blockquote>\n<p>I'm trying to enable allow \"unfree\" packages, either globally or per-package, when using MyNixOS (excellent Flake configuration app for Nix) with Nix Flakes on Mac OS.</p>\n<p>When trying to install any unfree package after the following Flake update and Darwin rebuild command:</p>\n<p>cd ~/.nix/mynixos-nix-darwin-loader;</p>\n<p>nix flake update;</p>\n<p>darwin-rebuild switch --show-trace --flake .#name_of_my_config'</p>\n<p>I get the following help message, which isn't very helpful because it doesn't consider the Flake scenario:</p>\n<p>error: Package ‘ec2-api-tools-1.7.5.1’ in /nix/store/${hash}-source/pkgs/tools/virtualization/e</p>\n<p>c2-api-tools/default.nix:36 has an unfree license (‘amazonsl’), refusing to evaluate.</p>\n<p>a) To temporarily allow unfree packages, you can use an environment variable</p>\n<p>for a single invocation of the nix tools.</p>\n<p>$ export NIXPKGS_ALLOW_UNFREE=1</p>\n<p>Note: For <code>nix shell</code>, <code>nix build</code>, <code>nix develop</code> or any other Nix 2.4+</p>\n<p>(Flake) command, <code>--impure</code> must be passed in order to read this</p>\n<p>environment variable.</p>\n<p>b) For <code>nixos-rebuild</code> you can set</p>\n<p>{ nixpkgs.config.allowUnfree = true; }</p>\n<p>in configuration.nix to override this.</p>\n<p>Alternatively you can configure a predicate to allow specific packages:</p>\n<p>{ nixpkgs.config.allowUnfreePredicate = pkg: builtins.elem (lib.getName pkg) [</p>\n<p>\"ec2-api-tools\"</p>\n<p>];</p>\n<p>}</p>\n<p>c) For <code>nix-env</code>, <code>nix-build</code>, <code>nix-shell</code> or any other Nix command you can add</p>\n<p>{ allowUnfree = true; }</p>\n<p>to ~/.config/nixpkgs/config.nix.</p>\n<p>Using MyNixOS downloads the following Flake file, and</p>\n<p>/nix/store/${hash}-source/homeConfigurations/my_flake_name.nix :</p>\n<p>{ inputs, ... }@flakeContext:</p>\n<p>let</p>\n<p>homeModule = { config, lib, pkgs, ... }: {</p>\n<p>config = {</p>\n<p>home = {</p>\n<p>packages = [</p>\n<p>ec2-api-tools</p>\n<h1>... more packages</h1>\n<p>];</p>\n<p>stateVersion = \"23.11\";</p>\n<p>};</p>\n<p>nixpkgs = {</p>\n<p>config = {</p>\n<p>allowUnfree = true;</p>\n<h1>allowUnfreePredicate = (_: true);</h1>\n<p>allowUnfreePredicate = pkg: builtins.elem (lib.getName pkg) [</p>\n<p>\"ec2-api-tools\"</p>\n<p>];</p>\n<p>};</p>\n<p>};</p>\n<p>Which results in a configuration path for the allowUnfreePredicate setting: homeModule.config.nixpkgs.config.allowUnfreePredicate . Does that seem correct?</p>\n<p>This configuration seems to make no difference, and installing unfree packages always results in the same error.</p>\n<p>Exactly what needs to be done to allow unfree packages in each of these distinct scenarios?</p>\n<p>NixOS</p>\n<p>Nix</p>\n<p>Nix with Flakes</p>\n<p>Nix with Flakes and Home Manager</p>\n<p>(Please edit the list or let me know if it doesn't make sense)</p>\n<p>The advice from the following web pages didn't seem to apply, or I couldn't figure out how to apply it:</p>\n<p>NixOS Discourse: Allow unfree in flakes</p>\n<p>GitHub: nix-community/home-manager: #2942: bug: Flake config cannot use unfree packages despite nixpkgs.config.allowUnfree = true</p>\n<p>GitHub: nix-community/home-manager: #2720: modules/default.nix: Add useNixpkgsModule parameter</p>\n<p>Abandoned merge request</p>\n</blockquote>\n<p>Published Date: 2023-12-01T12:21:17Z</p>",
        "id": 405354061,
        "sender_full_name": "Zapier",
        "timestamp": 1701434254
    },
    {
        "content": "<h2>How to override packages in a nix derivation?</h2>\n<p>Link: <a href=\"https://stackoverflow.com/questions/77635748/how-to-override-packages-in-a-nix-derivation\">https://stackoverflow.com/questions/77635748/how-to-override-packages-in-a-nix-derivation</a></p>\n<blockquote>\n<p>While developing a nix package, my default.nix looks like this:</p>\n<p>let</p>\n<p>pkgs = import &lt;nixpkgs&gt; {</p>\n<p>config = { ... }</p>\n<p>}</p>\n<p>in pkgs.path.to.derivation</p>\n<p>But when turning that into an actual package, the pkgs comes in as an argument. But adding a config to that doesn't seem to work:</p>\n<p>{ pkgs, ... }:</p>\n<p>let</p>\n<p>pkgs_ = pkgs // { config = { ... } };</p>\n<p>in pkgs_.path.to.derivation</p>\n<p>How do I add the same config to an already existing package set?</p>\n</blockquote>\n<p>Published Date: 2023-12-10T17:30:37Z</p>",
        "id": 407089423,
        "sender_full_name": "Zapier",
        "timestamp": 1702229532
    },
    {
        "content": "<h2>How to setup zsh-users/antigen with nix-env (non NixOS)?</h2>\n<p>Link: <a href=\"https://stackoverflow.com/questions/77637908/how-to-setup-zsh-users-antigen-with-nix-env-non-nixos\">https://stackoverflow.com/questions/77637908/how-to-setup-zsh-users-antigen-with-nix-env-non-nixos</a></p>\n<blockquote>\n<p>I installed antigen with nix-env -iA nixpkgs.antigen . After that, I have to source the antigen.zsh file into .zshrc but how do I get this file path from nix? Note that I am using macOS with nix-env . One way that I found is to get it from .nix-profile/shared/antigen/antigen.zsh but is it the best way to do it; if so, does it have any cons? Also, is there a $(brew --prefix) version for nix?</p>\n</blockquote>\n<p>Published Date: 2023-12-11T06:58:55Z</p>",
        "id": 407176910,
        "sender_full_name": "Zapier",
        "timestamp": 1702278717
    },
    {
        "content": "<h2>How can I make a shell.nix that runs some code, only using inbuilt derivation function?</h2>\n<p>Link: <a href=\"https://stackoverflow.com/questions/77656854/how-can-i-make-a-shell-nix-that-runs-some-code-only-using-inbuilt-derivation-fu\">https://stackoverflow.com/questions/77656854/how-can-i-make-a-shell-nix-that-runs-some-code-only-using-inbuilt-derivation-fu</a></p>\n<blockquote>\n<p>I basically want to create my own simple version of mkShell , so now I'm trying to understand how it would even be possible to execute some code before the shell actually pops up. I googled for a bit, and came up with this:</p>\n<p>let pkgs = import &lt;nixpkgs&gt; {}; in</p>\n<p>derivation {</p>\n<p>name = \"hello\";</p>\n<p>shellHook = ''</p>\n<p>echo \"hello world!\"</p>\n<p>'';</p>\n<p>system = builtins.currentSystem;</p>\n<p>builder = \"${pkgs.bash}/bin/bash\";</p>\n<p>args = [ ./setup.sh ];</p>\n<p>}</p>\n<p>From nix-shell documentation:</p>\n<p>If the derivation defines the variable shellHook, it will be run after $stdenv/setup has been sourced. Since this hook is not executed by regular Nix builds, it allows you to perform initialisation specific to nix-shell. For example, the derivation attribute</p>\n<p>shellHook =</p>\n<p>''</p>\n<p>echo \"Hello shell\"</p>\n<p>export SOME_API_TOKEN=\"$(cat ~/.config/some-app/api-token)\"</p>\n<p>'';</p>\n<p>But that doesn't output anything, although if I replace derivation {} with pkgs.mkShell {} , then it does. How can I make this behaviour work without actually using pkgs.mkShell ?</p>\n</blockquote>\n<p>Published Date: 2023-12-13T22:25:51Z</p>",
        "id": 407821851,
        "sender_full_name": "Zapier",
        "timestamp": 1702506695
    },
    {
        "content": "<h2>How can I make home-manager use nixpkgs-23.11 in flake system configuration?</h2>\n<p>Link: <a href=\"https://stackoverflow.com/questions/77661475/how-can-i-make-home-manager-use-nixpkgs-23-11-in-flake-system-configuration\">https://stackoverflow.com/questions/77661475/how-can-i-make-home-manager-use-nixpkgs-23-11-in-flake-system-configuration</a></p>\n<blockquote>\n<p>My flake.nix in /etc/nixos directory:</p>\n<p>{</p>\n<p>description = \"A very basic flake\";</p>\n<p>inputs = {</p>\n<p>nixpkgs.url = \"github:nixos/nixpkgs/nixos-23.11\";</p>\n<p>home-manager = {</p>\n<p>url = \"github:nix-community/home-manager\";</p>\n<p>inputs.nixpkgs.follows = \"nixpkgs\";</p>\n<p>};</p>\n<p>};</p>\n<p>outputs = { self, nixpkgs, home-manager, ... }@inputs:</p>\n<p>let</p>\n<p>system = \"x86_64-linux\";</p>\n<p>pkgs = import nixpkgs {</p>\n<p>inherit system;</p>\n<p>config.allowUnfree = true;</p>\n<p>};</p>\n<p>in {</p>\n<p>nixosConfigurations = rec {</p>\n<p>default = nixpkgs.lib.nixosSystem {</p>\n<p>specialArgs = { inherit inputs system; };</p>\n<p>modules = [ ./configuration.nix home-manager.nixosModules.home-manager ];</p>\n<p>};</p>\n<p>nixos = default;</p>\n<p>};</p>\n<p>};</p>\n<p>}</p>\n<p>When I run it (installing home-manager for the first time), I get this log:</p>\n<p>warning: creating lock file '/etc/nixos/flake.lock'</p>\n<p>building the system configuration...</p>\n<p>trace: warning: monkpatch profile: You are using</p>\n<p>Home Manager version 24.05 and</p>\n<p>Nixpkgs version 23.11.</p>\n<p>Using mismatched versions is likely to cause errors and unexpected</p>\n<p>behavior. It is therefore highly recommended to use a release of Home</p>\n<p>Manager that corresponds with your chosen release of Nixpkgs.</p>\n<p>If you insist then you can disable this warning by adding</p>\n<p>home.enableNixpkgsReleaseCheck = false;</p>\n<p>to your configuration.</p>\n<p>And if I replace nixos-23.11 with nixos-unstable in nixpkgs.url (line 5), then the error disappears. But what if I want to use nixos-23.11 ? What do I do?</p>\n</blockquote>\n<p>Published Date: 2023-12-14T15:58:41Z</p>",
        "id": 407994107,
        "sender_full_name": "Zapier",
        "timestamp": 1702570310
    },
    {
        "content": "<h2>How can I write a shell.nix for a Python environment that uses a custom PyPi location?</h2>\n<p>Link: <a href=\"https://stackoverflow.com/questions/77662568/how-can-i-write-a-shell-nix-for-a-python-environment-that-uses-a-custom-pypi-loc\">https://stackoverflow.com/questions/77662568/how-can-i-write-a-shell-nix-for-a-python-environment-that-uses-a-custom-pypi-loc</a></p>\n<blockquote>\n<p>I have a project that includes Python packages from a custom PyPi. How can I write a Nix shell.nix to use those packages, alongside others which are in the standard PyPi?</p>\n</blockquote>\n<p>Published Date: 2023-12-14T19:11:11Z</p>",
        "id": 408028352,
        "sender_full_name": "Zapier",
        "timestamp": 1702581828
    },
    {
        "content": "<h2>How can I change group of /dev/usb on NixOs?</h2>\n<p>Link: <a href=\"https://stackoverflow.com/questions/77685716/how-can-i-change-group-of-dev-usb-on-nixos\">https://stackoverflow.com/questions/77685716/how-can-i-change-group-of-dev-usb-on-nixos</a></p>\n<blockquote>\n<p>I can't seem to change the group of /dev/usb on nixos. It remains root no matter what I try. I can change the mode though and that has an effect. Here is my configuration for this.</p>\n<p>Configuration.nix:</p>\n<p>services.udev.extraRules = ''</p>\n<p>SUBSYSTEMS==\"usb\", MODE=\"0660\", GROUP=\"plugdev\" # Not working</p>\n<h1>SUBSYSTEM==\"usb\", MODE=\"0666\" # Tested and has an effect</h1>\n<p>'';</p>\n<p>users.groups.plugdev.members = [ \"mcmah309\" ];</p>\n<p>cat /etc/group shows plugdev is created and my user is assigned.</p>\n<p>ls -l /dev is still showing usb is in the root group.</p>\n<p>I expect the group of /dev/usb to be plugdev .</p>\n</blockquote>\n<p>Published Date: 2023-12-19T13:58:03Z</p>",
        "id": 408941788,
        "sender_full_name": "Zapier",
        "timestamp": 1702995052
    }
]