[
    {
        "content": "<p>oh cool. NCI is frustrating me with wasm and trunk right now. so if you have an example for wasm and trunk, that might get me to switch</p>",
        "id": 451203521,
        "sender_full_name": "Quinn",
        "timestamp": 1720892483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"734332\">@Quinn</span> <code>rust-flake</code> is designed to be basically a (flake-parts) wrapper over <a href=\"https://crane.dev/\">https://crane.dev/</a> - so if you can get something working with crane, it should map straightforwardly to <code>rust-flake</code>.</p>",
        "id": 451235367,
        "sender_full_name": "Srid",
        "timestamp": 1720910709
    },
    {
        "content": "<blockquote>\n<p>oh cool. NCI is frustrating me with wasm and trunk right now. so if you have an example for wasm and trunk, that might get me to switch</p>\n</blockquote>\n<p>Do you have an existing repo with wasm and trunk? I could try to package it using <code>rust-flake</code></p>",
        "id": 452163350,
        "sender_full_name": "Shivaraj B H",
        "timestamp": 1721242993
    },
    {
        "content": "<p>this is the current deal <a href=\"https://github.com/quinn-dougherty/gatekept-traffic-PoC/tree/master/src.rs\">https://github.com/quinn-dougherty/gatekept-traffic-PoC/tree/master/src.rs</a> i haven't done a ton of debugging as to why its not working. I will say my emacs lsp is jank in that it works when i <code>direnv</code> to an NCI full rust environment of the project, but it all depends on rustup not being installed. it all comes crashing down if emacs finds a rustup. that's a separate issue tho-- it'd be dope if it even built in CI.</p>",
        "id": 452163872,
        "sender_full_name": "Quinn",
        "timestamp": 1721243140
    },
    {
        "content": "<p>Alright, I will give it a try tomorrow, its almost bed time here.</p>",
        "id": 452164321,
        "sender_full_name": "Shivaraj B H",
        "timestamp": 1721243274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"734332\">@Quinn</span> it should be simple with crane: <a href=\"https://crane.dev/examples/trunk-workspace.html?highlight=trunk-work\">https://crane.dev/examples/trunk-workspace.html?highlight=trunk-work#</a></p>\n<p>I used the same flake in your <code>src.rs</code> dir and it worked fine. There are some unrelated code errors, which you will have to fix, here’s the tail of it:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error<span class=\"o\">[</span>E0599<span class=\"o\">]</span>:<span class=\"w\"> </span>no<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>or<span class=\"w\"> </span>associated<span class=\"w\"> </span>item<span class=\"w\"> </span>named<span class=\"w\"> </span><span class=\"sb\">`</span>new<span class=\"sb\">`</span><span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>struct<span class=\"w\"> </span><span class=\"sb\">`</span>Pixels<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>current<span class=\"w\"> </span>scope\n<span class=\"w\">  </span>--&gt;<span class=\"w\"> </span>site/src/components/pixels.rs:54:34\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">54</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">             </span><span class=\"nb\">let</span><span class=\"w\"> </span><span class=\"nv\">pixels</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>Pixels::new<span class=\"o\">(</span>width,<span class=\"w\"> </span>height,<span class=\"w\"> </span>gl_context<span class=\"o\">)</span>.unwrap<span class=\"o\">()</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\">                                  </span>^^^<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>or<span class=\"w\"> </span>associated<span class=\"w\"> </span>item<span class=\"w\"> </span>not<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"sb\">`</span>Pixels<span class=\"sb\">`</span>\n</code></pre></div>",
        "id": 452303633,
        "sender_full_name": "Shivaraj B H",
        "timestamp": 1721296999
    },
    {
        "content": "<p>Here’s the file (<code>src.rs/flake.nix</code>) that worked for me:</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"ss\">description</span> <span class=\"o\">=</span> <span class=\"s2\">\"Build a cargo project\"</span><span class=\"p\">;</span>\n\n  <span class=\"ss\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    nixpkgs<span class=\"o\">.</span><span class=\"ss\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"github:NixOS/nixpkgs/nixpkgs-unstable\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\"># The version of wasm-bindgen-cli needs to match the version in Cargo.lock</span>\n    <span class=\"c1\"># Update this to include the version you need</span>\n    nixpkgs-for-wasm-bindgen<span class=\"o\">.</span><span class=\"ss\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"github:NixOS/nixpkgs/4e6868b1aa3766ab1de169922bb3826143941973\"</span><span class=\"p\">;</span>\n\n    <span class=\"ss\">crane</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"ss\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"github:ipetkov/crane\"</span><span class=\"p\">;</span>\n      inputs<span class=\"o\">.</span>nixpkgs<span class=\"o\">.</span><span class=\"ss\">follows</span> <span class=\"o\">=</span> <span class=\"s2\">\"nixpkgs\"</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n    flake-utils<span class=\"o\">.</span><span class=\"ss\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"github:numtide/flake-utils\"</span><span class=\"p\">;</span>\n\n    <span class=\"ss\">rust-overlay</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"ss\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"github:oxalica/rust-overlay\"</span><span class=\"p\">;</span>\n      inputs<span class=\"o\">.</span>nixpkgs<span class=\"o\">.</span><span class=\"ss\">follows</span> <span class=\"o\">=</span> <span class=\"s2\">\"nixpkgs\"</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"ss\">outputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span> self<span class=\"p\">,</span> nixpkgs<span class=\"p\">,</span> crane<span class=\"p\">,</span> flake-utils<span class=\"p\">,</span> rust-overlay<span class=\"p\">,</span> nixpkgs-for-wasm-bindgen<span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">}:</span>\n    flake-utils<span class=\"o\">.</span>lib<span class=\"o\">.</span>eachDefaultSystem <span class=\"p\">(</span>system<span class=\"p\">:</span>\n      <span class=\"k\">let</span>\n        <span class=\"ss\">pkgs</span> <span class=\"o\">=</span> <span class=\"nb\">import</span> nixpkgs <span class=\"p\">{</span>\n          <span class=\"k\">inherit</span> system<span class=\"p\">;</span>\n          <span class=\"ss\">overlays</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">(</span><span class=\"nb\">import</span> rust-overlay<span class=\"p\">)</span> <span class=\"p\">];</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"k\">inherit</span> <span class=\"p\">(</span>pkgs<span class=\"p\">)</span> lib<span class=\"p\">;</span>\n\n        <span class=\"ss\">rustToolchainFor</span> <span class=\"o\">=</span> p<span class=\"p\">:</span> p<span class=\"o\">.</span>rust-bin<span class=\"o\">.</span>stable<span class=\"o\">.</span>latest<span class=\"o\">.</span>default<span class=\"o\">.</span>override <span class=\"p\">{</span>\n          <span class=\"c1\"># Set the build targets supported by the toolchain,</span>\n          <span class=\"c1\"># wasm32-unknown-unknown is required for trunk.</span>\n          <span class=\"ss\">targets</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s2\">\"wasm32-unknown-unknown\"</span> <span class=\"p\">];</span>\n        <span class=\"p\">};</span>\n        <span class=\"ss\">craneLib</span> <span class=\"o\">=</span> <span class=\"p\">((</span>crane<span class=\"o\">.</span>mkLib pkgs<span class=\"p\">)</span><span class=\"o\">.</span>overrideToolchain rustToolchainFor<span class=\"p\">)</span><span class=\"o\">.</span>overrideScope <span class=\"p\">(</span>_final<span class=\"p\">:</span> _prev<span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"c1\"># The version of wasm-bindgen-cli needs to match the version in Cargo.lock. You</span>\n          <span class=\"c1\"># can unpin this if your nixpkgs commit contains the appropriate wasm-bindgen-cli version</span>\n          <span class=\"k\">inherit</span> <span class=\"p\">(</span><span class=\"nb\">import</span> nixpkgs-for-wasm-bindgen <span class=\"p\">{</span> <span class=\"k\">inherit</span> system<span class=\"p\">;</span> <span class=\"p\">})</span> wasm-bindgen-cli<span class=\"p\">;</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"c1\"># When filtering sources, we want to allow assets other than .rs files</span>\n        <span class=\"ss\">src</span> <span class=\"o\">=</span> lib<span class=\"o\">.</span>cleanSourceWith <span class=\"p\">{</span>\n          <span class=\"ss\">src</span> <span class=\"o\">=</span> <span class=\"l\">./.</span><span class=\"p\">;</span> <span class=\"c1\"># The original, unfiltered source</span>\n          <span class=\"ss\">filter</span> <span class=\"o\">=</span> path<span class=\"p\">:</span> type<span class=\"p\">:</span>\n            <span class=\"p\">(</span>lib<span class=\"o\">.</span>hasSuffix <span class=\"s2\">\"\\.html\"</span> path<span class=\"p\">)</span> <span class=\"o\">||</span>\n            <span class=\"p\">(</span>lib<span class=\"o\">.</span>hasSuffix <span class=\"s2\">\"\\.scss\"</span> path<span class=\"p\">)</span> <span class=\"o\">||</span>\n            <span class=\"c1\"># Example of a folder for images, icons, etc</span>\n            <span class=\"p\">(</span>lib<span class=\"o\">.</span>hasInfix <span class=\"s2\">\"/assets/\"</span> path<span class=\"p\">)</span> <span class=\"o\">||</span>\n            <span class=\"c1\"># Default filter from crane (allow .rs files)</span>\n            <span class=\"p\">(</span>craneLib<span class=\"o\">.</span>filterCargoSources path type<span class=\"p\">)</span>\n          <span class=\"p\">;</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"ss\">commonArgs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n          <span class=\"k\">inherit</span> src<span class=\"p\">;</span>\n          <span class=\"ss\">strictDeps</span> <span class=\"o\">=</span> <span class=\"no\">true</span><span class=\"p\">;</span>\n\n          <span class=\"ss\">buildInputs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"c1\"># Add additional build inputs here</span>\n          <span class=\"p\">]</span> <span class=\"o\">++</span> lib<span class=\"o\">.</span>optionals pkgs<span class=\"o\">.</span>stdenv<span class=\"o\">.</span>isDarwin <span class=\"p\">[</span>\n            <span class=\"c1\"># Additional darwin specific inputs can be set here</span>\n            pkgs<span class=\"o\">.</span>libiconv\n          <span class=\"p\">];</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"c1\"># Wasm packages</span>\n\n        <span class=\"ss\">wasmArgs</span> <span class=\"o\">=</span> commonArgs <span class=\"o\">//</span> <span class=\"p\">{</span>\n          <span class=\"ss\">pname</span> <span class=\"o\">=</span> <span class=\"s2\">\"trunk-workspace-wasm\"</span><span class=\"p\">;</span>\n          <span class=\"ss\">cargoExtraArgs</span> <span class=\"o\">=</span> <span class=\"s2\">\"--package=site\"</span><span class=\"p\">;</span>\n          <span class=\"ss\">CARGO_BUILD_TARGET</span> <span class=\"o\">=</span> <span class=\"s2\">\"wasm32-unknown-unknown\"</span><span class=\"p\">;</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"ss\">cargoArtifactsWasm</span> <span class=\"o\">=</span> craneLib<span class=\"o\">.</span>buildDepsOnly <span class=\"p\">(</span>wasmArgs <span class=\"o\">//</span> <span class=\"p\">{</span>\n          <span class=\"ss\">doCheck</span> <span class=\"o\">=</span> <span class=\"no\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"ss\">mySite</span> <span class=\"o\">=</span> craneLib<span class=\"o\">.</span>buildTrunkPackage <span class=\"p\">(</span>wasmArgs <span class=\"o\">//</span> <span class=\"p\">{</span>\n          <span class=\"ss\">pname</span> <span class=\"o\">=</span> <span class=\"s2\">\"trunk-workspace-site\"</span><span class=\"p\">;</span>\n          <span class=\"ss\">cargoArtifacts</span> <span class=\"o\">=</span> cargoArtifactsWasm<span class=\"p\">;</span>\n          <span class=\"ss\">trunkIndexPath</span> <span class=\"o\">=</span> <span class=\"s2\">\"site/index.html\"</span><span class=\"p\">;</span>\n          <span class=\"c1\"># The version of wasm-bindgen-cli here must match the one from Cargo.lock.</span>\n          <span class=\"ss\">wasm-bindgen-cli</span> <span class=\"o\">=</span> pkgs<span class=\"o\">.</span>wasm-bindgen-cli<span class=\"o\">.</span>override <span class=\"p\">{</span>\n            <span class=\"ss\">version</span> <span class=\"o\">=</span> <span class=\"s2\">\"0.2.92\"</span><span class=\"p\">;</span>\n            <span class=\"ss\">hash</span> <span class=\"o\">=</span> <span class=\"s2\">\"sha256-1VwY8vQy7soKEgbki4LD+v259751kKxSxmo/gqE6yV0=\"</span><span class=\"p\">;</span>\n            <span class=\"ss\">cargoHash</span> <span class=\"o\">=</span> <span class=\"s2\">\"sha256-aACJ+lYNEU8FFBs158G1/JG8sc6Rq080PeKCMnwdpH0=\"</span><span class=\"p\">;</span>\n          <span class=\"p\">};</span>\n        <span class=\"p\">});</span>\n        <span class=\"ss\">serve-app</span> <span class=\"o\">=</span> pkgs<span class=\"o\">.</span>writeShellScriptBin <span class=\"s2\">\"serve-app\"</span> <span class=\"s s-Multiline\">''</span>\n<span class=\"s s-Multiline\">          </span><span class=\"si\">${</span>pkgs<span class=\"o\">.</span>python3Minimal<span class=\"si\">}</span><span class=\"s s-Multiline\">/bin/python3 -m http.server --directory </span><span class=\"si\">${</span>mySite<span class=\"si\">}</span><span class=\"s s-Multiline\"> 8000</span>\n<span class=\"s s-Multiline\">        ''</span><span class=\"p\">;</span>\n      <span class=\"k\">in</span>\n      <span class=\"p\">{</span>\n        <span class=\"ss\">checks</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n          <span class=\"k\">inherit</span> mySite<span class=\"p\">;</span>\n        <span class=\"p\">};</span>\n        packages<span class=\"o\">.</span><span class=\"ss\">default</span> <span class=\"o\">=</span> mySite<span class=\"p\">;</span>\n\n        apps<span class=\"o\">.</span><span class=\"ss\">default</span> <span class=\"o\">=</span> flake-utils<span class=\"o\">.</span>lib<span class=\"o\">.</span>mkApp <span class=\"p\">{</span>\n          <span class=\"ss\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"server\"</span><span class=\"p\">;</span>\n          <span class=\"ss\">drv</span> <span class=\"o\">=</span> serve-app<span class=\"p\">;</span>\n        <span class=\"p\">};</span>\n\n        devShells<span class=\"o\">.</span><span class=\"ss\">default</span> <span class=\"o\">=</span> craneLib<span class=\"o\">.</span>devShell <span class=\"p\">{</span>\n          <span class=\"c1\"># Inherit inputs from checks.</span>\n          <span class=\"ss\">checks</span> <span class=\"o\">=</span> self<span class=\"o\">.</span>checks<span class=\"o\">.</span><span class=\"si\">${</span>system<span class=\"si\">}</span><span class=\"p\">;</span>\n\n          <span class=\"c1\"># Extra inputs can be added here; cargo and rustc are provided by default.</span>\n          <span class=\"ss\">packages</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            pkgs<span class=\"o\">.</span>trunk\n          <span class=\"p\">];</span>\n        <span class=\"p\">};</span>\n      <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 452303889,
        "sender_full_name": "Shivaraj B H",
        "timestamp": 1721297081
    },
    {
        "content": "<p>7 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"413950\" href=\"/#narrow/stream/413950-nix/topic/rust-flake.20.28Nixify.20Rust.20projects.29\">#nix &gt; rust-flake (Nixify Rust projects)</a> by <span class=\"user-mention silent\" data-user-id=\"669081\">Shivaraj B H</span>.</p>",
        "id": 452304428,
        "sender_full_name": "Notification Bot",
        "timestamp": 1721297247
    },
    {
        "content": "<p>It should not be hard to support this in <code>rust-flake</code>. The only difference is the usage of <code>buildTrunkPackage</code> in place of <a href=\"https://github.com/juspay/rust-flake/blob/658edce0b6bb521f1f54957ddbfab80f73066bee/nix/modules/crate.nix#L94\">buildPackage</a>. <br>\nThis is a schema I propose:</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"ss\">rust-project</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"ss\">crates</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"site\"</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n           <span class=\"ss\">isTrunkPackage</span> <span class=\"o\">=</span> <span class=\"no\">true</span><span class=\"p\">;</span>\n           <span class=\"ss\">extraBuildArgs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n             <span class=\"ss\">wasm-bindgen-cli</span> <span class=\"o\">=</span> <span class=\"err\">…</span>\n             <span class=\"ss\">trunkIndexPath</span> <span class=\"o\">=</span> <span class=\"s2\">\"site/index.html\"</span><span class=\"p\">;</span>\n       <span class=\"p\">};</span>\n      <span class=\"s2\">\"cli\"</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"err\">…</span> <span class=\"p\">};</span>\n      <span class=\"s2\">\"holodeck\"</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"err\">…</span> <span class=\"p\">};</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This would replace the 100+ line of flake.nix from above</p>",
        "id": 452307899,
        "sender_full_name": "Shivaraj B H",
        "timestamp": 1721298463
    },
    {
        "content": "<p>Perhaps we should have a freeform type that can build all types of derivations, using:</p>\n<ul>\n<li><code>buildPackage</code></li>\n<li><code>buidTrunkPackage</code></li>\n<li><code>cargoClippy</code></li>\n<li><code>cargoDoc</code></li>\n<li><code>cargoFmt</code></li>\n<li><code>cargoLlvmCov</code></li>\n<li><code>cargoNextest</code></li>\n<li>etc.</li>\n</ul>\n<p>(Search for <code>-&gt; drv</code> in <a href=\"https://crane.dev/API.html\">https://crane.dev/API.html</a> to find these)</p>\n<p>For e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code><span class=\"p\">{</span>\n  rust-project<span class=\"o\">.</span>crates<span class=\"o\">.</span><span class=\"s2\">\"foo\"</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    packages<span class=\"o\">.</span><span class=\"ss\">trunk</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"ss\">extraBuildArgs</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span> <span class=\"p\">};</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 452364816,
        "sender_full_name": "Srid",
        "timestamp": 1721314254
    },
    {
        "content": "<p>Eventually, we can even allow the user to build a custom package.</p>",
        "id": 452364900,
        "sender_full_name": "Srid",
        "timestamp": 1721314281
    },
    {
        "content": "<p><code>packages.NAME</code> maps to a known builder if <code>NAME</code> is known (eg: <code>trunk</code> maps to <code>buildTrunkPackage</code>). The user can define their own builders.</p>",
        "id": 452364977,
        "sender_full_name": "Srid",
        "timestamp": 1721314310
    },
    {
        "content": "<p>In the meanwhile, <span class=\"user-mention\" data-user-id=\"734332\">@Quinn</span> can already use rust-flake to call <code>buildTrunkPackage</code> because we expose <code>crane-lib</code> anyway.</p>",
        "id": 452365297,
        "sender_full_name": "Srid",
        "timestamp": 1721314381
    },
    {
        "content": "<p>As an aside, it would be good to have a template for Trunk projects, especially as part of <a href=\"https://github.com/juspay/rust-flake/issues/15\">https://github.com/juspay/rust-flake/issues/15</a></p>",
        "id": 452365408,
        "sender_full_name": "Srid",
        "timestamp": 1721314418
    }
]